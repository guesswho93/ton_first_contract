#include "imports/stdlib.fc";

global slice admin_address;

const op::accept_funds = 0xa4d8086f;
const op::admin_withdraw = 0x217e5898;


() save_data() impure inline {
    set_data(
        begin_cell()
        .store_slice(admin_address)
        .end_cell()
    );
}

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    admin_address = ds~load_msg_addr();
    ds.end_parse();
}

() send_empty_message(int amount, slice to, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
    send_raw_message(msg, mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    load_data();

    if (op == op::accept_funds) {
       if (msg_value < 2000000000) {
            send_empty_message(msg_value, sender, 1);
        } else {
        }
        return ();
    }

    if (op == op::admin_withdraw) {
        ;; throw_unless(101, equal_slices(sender, admin_address));
        int min_balance = 5000000;
        int withdraw_amount = in_msg_body~load_coins();

        ;; throw_unless(102, my_balance - withdraw_amount < min_balance);
        send_empty_message(withdraw_amount, admin_address, 1);
        return ();
    }

    throw(0xffff);
}

int get_contract_balance() method_id {
    var [balance, _ ] = get_balance(); 
    return balance;
}

slice get_admin_address() method_id {
    load_data();
    return admin_address;
}
